var debug   = require('debug')('collection'),
    Q       = require('Q');

module.exports = Collection;

function Collection (db, name) {
    if (!db) {
        throw "DB instance is null";
    }

    if (!name) {
        throw "Collection name is missing";
    }

    this.dbClient     = db;
    this.name   = name;
}

Collection.prototype._coll = function () {
    return this.dbClient.connect(function (db) {
        return db.collection(this.name)
    })
}

/**
 * Create index on collection
 * @param indexHash e.g. {field1: 1, field2: 1}
 * @param options
 * {unique      : <Boolean, default:false>,
 *  sparse      : <Boolean, default:false>,
 *  background  : <Boolean, default:false>,
 *  dropDups    : <Boolean, default:false>,
 *  min         : Number,
 *  max         : Number,
 *  v           : Number
 *  w           : Number,
 *  name        : <String, override the autogenerated index name >
 * }
 * @returns {promise|*|Q.promise|*|null}
 */
Collection.prototype.createIndex = function (indexHash, options) {
    debug('createIndex(%s, %s)', indexHash, options);
    var self = this;
    return self.dbClient.connect(function (db) {
        return Q.ninvoke(db, 'createIndex', self.name, indexHash, options);
    });
};


/**
 * Ensure index on collection
 * @param indexHash e.g. {field1: 1, field2: 1}
 * @param options
 * {unique      : <Boolean, default:false>,
 *  sparse      : <Boolean, default:false>,
 *  background  : <Boolean, default:false>,
 *  dropDups    : <Boolean, default:false>,
 *  min         : Number,
 *  max         : Number,
 *  v           : Number
 *  w           : Number,
 *  name        : <String, override the autogenerated index name >
 * }
 * @returns {promise|*|Q.promise|*|null}
 */
Collection.prototype.ensureIndex = function (indexHash, options) {
    debug('ensureIndex(%s, %s)', indexHash, options);
    var self = this;
    return self.dbClient.connect(function (db) {
        return Q.ninvoke(db, 'ensureIndex', self.name, indexHash, options);
    });
};

Collection.prototype.reIndex = function () {
    debug('reIndex()');
    var self = this;
    return self.dbClient.connect(function (db) {
        return Q.ninvoke(db, 'reIndex', self.name, indexName);
    });
};

Collection.prototype.indexInfo = function () {
    debug('indexInfo()');
    var self = this;
    return self._coll(function (coll) {
        return Q.ninvoke(coll, 'indexInformation', self.name);
    });
};

/**
 * Drop index on collection
 * @param indexName
 * @returns {promise|*|Q.promise|*|null}
 */
Collection.prototype.dropIndex = function (indexName) {
    debug('dropIndex(%s)', indexName);
    var self = this;
    return self.dbClient.connect(function (db) {
        return Q.ninvoke(db, 'dropIndex', self.name, indexName);
    });
};


